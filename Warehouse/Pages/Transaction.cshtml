@page
@using System.Data
@model TransactionModel
@{
    ViewData["Title"] = "Transaction";
}

<div class="d-flex align-items-center mb-2">
    <div>
        <h4 class="font-weight-bold mb-2">Transaction</h4>
        <p>Record transaction in and transaction out</p>
    </div>
</div>

<div class="card radius-10">
	<div class="card-body">

		<button type="button" class="mb-2 radius-8 btn btn-outline-primary d-flex align-items-center" onclick="addTransaction()"><i class="bx bx-plus"></i>Add New</button>

		<div class="table-responsive">
			<table id="tableTransaction" class="table mb-0 align-middle" style="width:100%">
				<thead class="table-light">
					<tr>
						<th>Action</th>
						<th>Warehouse</th>
						<th>Transaction Type</th>
						<th>Transaction Date</th>
						<th>Status</th>
						<th>Quantity Total</th>
						<th>User Input</th>
					</tr>
				</thead>
				<tbody>
				</tbody>
			</table>
		</div>

    </div>
</div>

<div class="modal fade" id="modalTransaction" tabindex="-1" aria-labelledby="modalTransactionLabel" aria-hidden="true" data-bs-keyboard="false" data-bs-backdrop="static">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content radius-10">
			<div class="modal-header">
				<h5 class="modal-title" id="modalTransactionLabel">Add Transaction</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
						aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<input type="hidden" id="IDTransaction" />
				<div class="mb-3">
					<label for="TransactionDate" class="form-label">Transaction Date</label>
					<input type="date" class="form-control" id="TransactionDate">
				</div>
				<div class="mb-3">
					<label class="form-label">Select Warehouse</label>
					<select class="form-select" id="Warehouse">
						<option value="" selected>Select Warehouse...</option>
						@foreach (DataRow dr in Model.GetAllWarehouse().Rows)
						{
							<option value='@dr["Code"]'>@dr["Name"]</option>
						}
					</select>
				</div>
				<div class="mb-3">
					<label class="form-label">Transaction Type</label>
					<select class="form-select" id="TransactionType">
						<option value='IN'>IN</option>
						<option value='OUT'>OUT</option>
					</select>
				</div>
				<label class="form-label">Product</label>
				<div class="card">
					<div class="card-body">
						<button type="button" id="btnAddProduct" class="mb-2 radius-8 btn btn-outline-primary" onclick="addProduct()">
							<i class="bx bx-plus"></i>
							Add Product
						</button>
						<div class="table-responsive">
							<table id="tableProduct" class="table mb-0 align-middle" style="width:100%">
								<thead class="table-light">
									<tr>
										<th>Action</th>
										<th>Product</th>
										<th>Quantity</th>
									</tr>
								</thead>
								<tbody>
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary radius-8"
						data-bs-dismiss="modal">
					Cancel
				</button>
				<button id="btnSaveTransaction" type="button" class="btn btn-primary radius-8" onclick="saveTransaction()">
					<i class="bx bx-check"></i>
					Save
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="modalProduct" tabindex="-1" aria-labelledby="modalProductLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content radius-10">
			<div class="modal-header">
				<h5 class="modal-title" id="modalProductLabel">Add Product</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
						aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<input type="hidden" id="IDProduct" />
				<div class="mb-3">
					<label class="form-label">Select Product</label>
					<select class="form-select" id="Product">
						<option value="" selected>Select Product...</option>
						@foreach (DataRow dr in Model.GetAllProduct().Rows)
						{
							<option value='@dr["Code"]'>@dr["Name"]</option>
						}
					</select>
				</div>
				<div class="mb-3">
					<label for="QuantityProduct" class="form-label">Quantity</label>
					<input type="number" class="form-control" id="QuantityProduct">
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary radius-8"
						data-bs-dismiss="modal">
					Cancel
				</button>
				<button type="button" class="btn btn-primary radius-8" onclick="saveProduct()">
					<i class="bx bx-check"></i>
					Save
				</button>
			</div>
		</div>
	</div>
</div>

<div id="modalError" class="modal fade" tabindex="-1" role="dialog">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Error</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
						aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p id="modalErrorLabel">Please select Product</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-primary px-4 py-1" data-bs-dismiss="modal">Ok</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="modalDelete" tabindex="-1" aria-labelledby="modalDeleteLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content radius-10">
			<div class="modal-header">
				<h5 class="modal-title" id="modalDeleteLabel">Delete</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
						aria-label="Close">
				</button>
			</div>
			<div class="modal-body">
				Are you sure want to delete this data
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary radius-8"
						data-bs-dismiss="modal">
					Cancel
				</button>
				<input type="hidden" id="CodeDelete" />
				<input type="hidden" id="From" />
				<button type="button" class="btn btn-danger radius-8" onclick="confirmDelete()">
					Delete
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="modalSubmit" tabindex="-1" aria-labelledby="modalSubmitLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content radius-10">
			<div class="modal-header">
				<h5 class="modal-title" id="modalSubmitLabel">Submit</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
						aria-label="Close">
				</button>
			</div>
			<div class="modal-body">
				Are you sure you want to submit this data? Once submitted, this data can't be edited
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary radius-8"
						data-bs-dismiss="modal">
					Cancel
				</button>
				<input type="hidden" id="From" />
				<button type="button" class="btn btn-primary radius-8" onclick="saveSubmitTransaction()">
					Submit
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="modalApprove" tabindex="-1" aria-labelledby="modalApproveLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content radius-10">
			<div class="modal-header">
				<h5 class="modal-title" id="modalApproveLabel">Approve</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
						aria-label="Close">
				</button>
			</div>
			<div class="modal-body">
				Are you sure you want to approve this data?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary radius-8"
						data-bs-dismiss="modal">
					Cancel
				</button>
				<button type="button" class="btn btn-success radius-8" onclick="saveApproveTransaction()">
					Approve
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="modalDecline" tabindex="-1" aria-labelledby="modalDeclineLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content radius-10">
			<div class="modal-header">
				<h5 class="modal-title" id="modalDeclineLabel">Decline</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
						aria-label="Close">
				</button>
			</div>
			<div class="modal-body">
				Are you sure you want to decline this data?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary radius-8"
						data-bs-dismiss="modal">
					Cancel
				</button>
				<button type="button" class="btn btn-danger radius-8" onclick="saveDeclineTransaction()">
					Decline
				</button>
			</div>
		</div>
	</div>
</div>



<script>

	let listProduct = [];

	let IDTransaction = 0;

	$(document).ready(function () {
		refreshDataTable();
	});

	$(document).on({
		'show.bs.modal': function () {
			var zIndex = 1040 + (10 * $('.modal:visible').length);
			$(this).css('z-index', zIndex);
			setTimeout(function () {
				$('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
			}, 0);
		},
		'hidden.bs.modal': function () {
			if ($('.modal:visible').length > 0) {
				setTimeout(function () {
					$(document.body).addClass('modal-open');
				}, 0);
			}
		}
	}, '.modal');

	function refreshDataTable() {
		$.ajax({
			url: "?handler=AllTransaction",
			type: "GET",
			success: function (data) {
				var table = $('#tableTransaction').DataTable({
					data: data,
					destroy: true,
					columns: [
						{
							data: "ID", render: function (data, types, row, meta) {
								var btnApproveSubmit = '';
								var btnDelete = '';
								var btnDecline = '';

								const roleUser = '@HttpContext.Session.GetString(Util.SESSION_USER_ROLE)';
								const userNameUser = '@HttpContext.Session.GetString(Util.SESSION_USER_NAME)';

								if (roleUser == "OPR" && userNameUser == row.UserInput) {
									btnApproveSubmit = row.Status == 0 ? '<a type="button" class="text-primary bg-light-primary border-0" onclick="submitTransaction(\'' + data + '\')"><i class="bx bxs-check-circle"></i></a>' : "";
								} else if (roleUser == "BM") {
									if (row.Status == 1) {
										btnDecline = '<a type="button" class="text-danger bg-light-danger border-0 me-3" onclick="declineTransaction(\'' + data + '\')"><i class="bx bxs-x-circle"></i></a>';
										btnApproveSubmit = '<a type="button" class="text-success bg-light-success border-0" onclick="approveTransaction(\'' + data + '\')"><i class="bx bxs-check-circle"></i></a>';
									}
									if (row.Status == 0 && userNameUser == row.UserInput) {
										btnApproveSubmit = '<a type="button" class="text-primary bg-light-primary border-0" onclick="submitTransaction(\'' + data + '\')"><i class="bx bxs-check-circle"></i></a>';
									}
								} else if (roleUser == "SA" || roleUser == "ADM") {
									if (row.Status == 0 && userNameUser == row.UserInput) {
										btnApproveSubmit = '<a type="button" class="text-primary bg-light-primary border-0" onclick="submitTransaction(\'' + data + '\')"><i class="bx bxs-check-circle"></i></a>';
									}
								}

								if (userNameUser == row.UserInput && row.Status == 0) {
									btnDelete = '<a type="button" class="text-danger bg-light-danger border-0 me-3" onclick="deleteTransaction(\'' + data + '\')" data-bs-toggle="modal" data-bs-target="#modalDelete"><i class="bx bxs-trash"></i></a>';
								}

								return '<div class="d-flex order-actions">' +
									'<a type="button" class="text-primary bg-light-primary border-0 me-3" onclick="editTransaction(\'' + data + '\')"><i class="bx bxs-edit"></i></a>' +
									btnDelete +
									btnDecline +
									btnApproveSubmit +
									'</div>';
							}
						},
						{ data: "Warehouse" },
						{
							data: "TransactionType", render: function (data, types, row, meta) {
								return (data == "IN" ? '<div class="badge rounded-pill text-success bg-light-success p-2 text-uppercase px-3">IN</div>' : '<div class="badge rounded-pill text-danger bg-light-danger p-2 text-uppercase px-3">OUT</div>');
							}
						},
						{ data: "TransactionDate" },
						{
							data: "Status", render: function (data, types, row, meta) {
								switch (data) {
									case 0:
										return '<div class="badge rounded-pill text-warning bg-light-warning p-2 text-uppercase px-3">New</div>';
										break;
									case 1:
										return '<div class="badge rounded-pill text-primary bg-light-primary p-2 text-uppercase px-3">Submitted</div>';
										break;
									default:
										return '<div class="badge rounded-pill text-success bg-light-success p-2 text-uppercase px-3">Approved</div>'
								}
							}
						},
						{ data: "QuantityTotal" },
						{ data: "UserInputName" }
					],
				})
			},
			error: function (xhr, status, error) {
				console.error(xhr.responseText);
			}
		});

		var tableProduct = $('#tableProduct').DataTable({
			data: listProduct,
			destroy: true,
			columns: [
				{
					data: "ID", render: function (data, types, row, meta) {
						return $("#btnSaveTransaction").prop("hidden") == false ? '<div class="d-flex order-actions">' +
							'<a type="button" class="text-primary bg-light-primary border-0 me-3" onclick="editProduct(\'' + data + '\')"><i class="bx bxs-edit"></i></a>' +
							'<a type="button" class="text-danger bg-light-danger border-0" onclick="deleteProduct(\'' + data + '\')"><i class="bx bxs-trash"></i></a>' +
							'</div>' : "";
					}
				},
				{ data: "Product" },
				{ data: "Quantity" },
			],
		})
	}

	function confirmDelete() {
		const From = $("#From").val();
		const ID = $("#CodeDelete").val();
		if (From == "Transaction") {
			$.ajax({
				url: '?handler=DeleteData&ID=' + ID,
				type: 'POST',
				contentType: 'application/json',
				success: function (response) {
					refreshDataTable();
					$("#modalDelete").modal("hide")
				},
				error: function (xhr, status, error) {
					console.error('Error:', error);
				}
			});
		} else {
			listProduct = listProduct.filter(item => item.ID != ID);
			refreshDataTable();
			$("#modalDelete").modal("hide");
		}
	}

	function addTransaction() {
		$.ajax({
			url: "?handler=UserDetail",
			type: "GET",
			contentType: 'application/json',
			success: function (response) {
				$("#TransactionDate").val(new Date().toISOString().slice(0, 10));
				if (response.WarehouseCode != null && response.WarehouseCode != "") {
					$("#Warehouse").empty();
					$("#Warehouse").append('<option value="' + response.WarehouseCode + '">' + response.WarehouseName + '</option>')
				}
				$("#btnSaveTransaction").prop("hidden", false);
				$("#btnAddProduct").prop("hidden", false);
				$("#TransactionType").val("IN");
				$("#DescriptionTransaction").val("");
				$("#IDTransaction").val("");
				$("#modalTransactionLabel").text("Add Transaction");
				listProduct = [];
				refreshDataTable();

				$("#modalTransaction").modal('show');
			},
			error: function (xhr, status, error) {
				console.error(xhr.responseText);
			}
		});
	}

	let deleteTransaction = (ID) => {
		$("#CodeDelete").val(ID);
		$("#From").val("Transaction");
	}

	let deleteProduct = (ID) => {
		$("#CodeDelete").val(ID);
		$("#From").val("Product");
		$("#modalDelete").modal("show");
	}

	function addProduct() {
		$("#Product").val("");
		$("#QuantityProduct").val("");
		$("#IDProduct").val("");

		$("#modalProductLabel").text("Add Product");
		$("#modalProduct").modal("show");
	}

	function saveProduct() {
		const productCode = $("#Product").val();
		const productName = $("#Product option:selected").text();
		const quantity = $("#QuantityProduct").val();

		if (productCode == "") {
			$("#modalErrorLabel").text("Please select product");
			$("#modalError").modal("show");
			return;
		}

		if (quantity == "" || quantity == "0") {
			$("#modalErrorLabel").text("Please fill in the quantity field");
			$("#modalError").modal("show");
			return;
		}

		if (listProduct.find(item => item.ProductCode == productCode) != null) {
			$("#modalErrorLabel").text("This product already exists");
			$("#modalError").modal("show");
			return;
		}

		let newID = 1; 
		if (listProduct.length > 0) {
			newID = listProduct[listProduct.length - 1].ID + 1;
		}
		const newProduct = {
			ID: newID,
			Product: productName,
			ProductCode: productCode,
			Quantity: quantity
		};

		listProduct.push(newProduct);
		refreshDataTable();
		$("#modalProduct").modal("hide");
	}

	function saveTransaction() {
		const data = {
			"ID": $("#IDTransaction").val(),
			"TransactionDate": TransactionDate.value,
			"WarehouseCode": $("#Warehouse").val(),
			"TransactionType": $("#TransactionType").val(),
			"Details": listProduct,
		};

		$.ajax({
			url: "?handler=SaveDataTransaction",
			type: "POST",
			contentType: 'application/json',
			data: JSON.stringify(data),
			success: function (data) {
				$("#modalTransaction").modal('hide');
				refreshDataTable();
			},
			error: function (xhr, status, error) {
				console.error(xhr.responseText);
			}
		});
	}

	function editTransaction(ID) {
		$.ajax({
			url: '?handler=ViewDetailTransaction&ID=' + ID,
			type: 'GET',
			datatype: 'json',
			success: function (response) {
				$("#Warehouse").val(response.Transaction.WarehouseCode);
				$("#TransactionType").val(response.Transaction.TransactionType);
				$("#TransactionDate").val(response.Transaction.TransactionDate);
				$("#IDTransaction").val(response.Transaction.ID);

				if ('@HttpContext.Session.GetString(Util.SESSION_USER_NAME)' == response.Transaction.UserInput && response.Transaction.Status == 0) {
					$("#btnSaveTransaction").prop("hidden", false);
					$("#btnAddProduct").prop("hidden", false);
				} else {
					$("#btnSaveTransaction").prop("hidden", true);
					$("#btnAddProduct").prop("hidden", true);
				}

				listProduct = response.Details;
				refreshDataTable();

				$("#modalTransactionLabel").val('Edit Transaction');
				$("#modalTransaction").modal('show');
			},
			error: function (xhr, status, error) {
				console.error('Error:', error);
			}
		});
	}
	
	let submitTransaction = (ID) => {
		$("#modalSubmit").modal("show");
		IDTransaction = ID;
	}

	let approveTransaction = (ID) => {
		$("#modalApprove").modal("show");
		IDTransaction = ID;
	}

	let declineTransaction = (ID) => {
		$("#modalDecline").modal("show");
		IDTransaction = ID;
	}

	function saveSubmitTransaction() {
		$.ajax({
			url: '?handler=SubmitTransaction&ID=' + IDTransaction,
			type: 'POSt',
			datatype: 'json',
			success: function (response) {
				refreshDataTable();
				$("#toastMessageText").text(response);
				$("#toastMessage").toast('show');
				$("#modalSubmit").modal('hide');
			},
			error: function (xhr, status, error) {
				console.error('Error:', error);
			}
		});
	}

	function saveApproveTransaction() {
		$.ajax({
			url: '?handler=ApproveTransaction&ID=' + IDTransaction,
			type: 'POSt',
			datatype: 'json',
			success: function (response) {
				refreshDataTable();
				$("#toastMessageText").text(response);
				$("#toastMessage").toast('show');
				$("#modalApprove").modal('hide');
			},
			error: function (xhr, status, error) {
				console.error('Error:', error);
			}
		});
	}

	function saveDeclineTransaction() {
		$.ajax({
			url: '?handler=DeclineTransaction&ID=' + IDTransaction,
			type: 'POSt',
			datatype: 'json',
			success: function (response) {
				refreshDataTable();
				$("#toastMessageText").text(response);
				$("#toastMessage").toast('show');
				$("#modalDecline").modal('hide');
			},
			error: function (xhr, status, error) {
				console.error('Error:', error);
			}
		});
	}

	function editProduct(ID) {
		const product = listProduct.find(item => item.ID == ID);
		$("#Product").val(product.ProductCode);
		$("#QuantityProduct").val(product.Quantity);
		$("#IDProduct").val(ID);
		$("#modalProductLabel").text("Edit Product");
		$("#modalProduct").modal("show");
	}


</script>